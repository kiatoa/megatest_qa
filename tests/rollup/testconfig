# test2 from the tests/Makefile
[setup]
megatestsubarea #{getenv MT_TEST_RUN_DIR}/fullrun

[var]
tname rollup

[ezsteps]

# Set things up
rsync    rsync -av --exclude '*.db' $MT_RUN_AREA_HOME/fullrun/ ./fullrun/
clean    $MTRUNNER $MT_TEST_RUN_DIR/fullrun  $MTPATH megatest -remove-runs -testpatt %                    -target  ubuntu/nfs/none -runname #{get var tname}%
runfirst $MTRUNNER $MT_TEST_RUN_DIR/fullrun  $MTPATH megatest -runtests runfirst/% -reqtarg ubuntu/nfs/none -runname #{get var tname}   -preclean -run-wait
firstres $MTRUNNER $MT_TEST_RUN_DIR/fullrun  $MTPATH megatest -list-runs #{get var tname}   -target ubuntu/nfs/none

# Set one test item to INCOMPLETE
setstate $MTRUNNER $MT_TEST_RUN_DIR/fullrun  $MTPATH megatest -set-state-status INCOMPLETE,FAIL :state COMPLETED :status PASS -testpatt runfirst/b/2 -target ubuntu/nfs/none -runname #{get var tname}

# Rerun a different test item
rerun    $MTRUNNER $MT_TEST_RUN_DIR/fullrun  $MTPATH megatest -run         -testpatt  runfirst/spring     -reqtarg ubuntu/nfs/none -runname #{get var tname} -preclean -rerun PASS -run-wait

results  $MTRUNNER $MT_TEST_RUN_DIR/fullrun $MTPATH megatest -list-runs #{get var tname} -target ubuntu/nfs/none

[logpro]
runfirst ;;
  (expect:ignore in "LogFileBody" >= 0 "Ignore error \"This should evoke an error.\"" #/This should evoke an error/) 
  (expect:error in "LogFileBody" = 0 "NoErrors" #/error/i)
setstate (expect:error in "LogFileBody" = 0 "NoErrors" #/error/i)
rerun    ;;
  (expect:ignore in "LogFileBody" >= 0 "NFS causes rm to fail sometimes" #/ERROR: There was a problem removing/)
  (expect:error in "LogFileBody" = 0 "NoErrors" #/error/i)

[include #{getenv MT_RUN_AREA_HOME}/#{getenv testsuite_mode}-items.config]

[requirements]
# waiton  #{getenv ALL_TOPLEVEL_TESTS}
priority 1

# This is a "toplevel" test, it does not require waitons to be non-FAIL to run
# mode toplevel


# test2 : fullprep
[test_meta]
tags quick,dev,integ
